from optizenith import *
from optizenith.solvers import *

import unittest

class TestSolvers(unittest.TestCase):

    def test_simplex(self):
        model = Model("Simplex Test")
        x = model.add_variable("x")
        y = model.add_variable("y")
        expr = LinearExpr()
        expr.add_term(x, 1)
        expr.add_term(y, 2)
        model.objective = Objective(expr, "max")
        expr = LinearExpr()
        expr.add_term(x, 1)
        expr.add_term(y, 1)
        model.add_constraint(expr, "<=", 10)
        expr = LinearExpr()
        expr.add_term(x, 1)
        expr.add_term(y, 4)
        model.add_constraint(expr, "<=", 20)
        expr = LinearExpr()
        expr.add_term(x, 3)
        expr.add_term(y, 2)
        model.add_constraint(expr, "<=", 30)
        solver = SimplexSolver(model)
        obj, sol = solver.solve()
        self.assertAlmostEqual(obj, 40/3)
    
    def test_simplex_2(self):
        model = Model("Simplex Test 2")
        x1 = model.add_variable("x1")
        x2 = model.add_variable("x2")
        x3 = model.add_variable("x3")
        expr = LinearExpr()
        expr.add_term(x1, 3)
        expr.add_term(x2, 2)
        expr.add_term(x3, 1)
        model.objective = Objective(expr, "max")
        expr = LinearExpr()
        expr.add_term(x1, 1)
        expr.add_term(x2, 1)
        expr.add_term(x3, 1)
        model.add_constraint(expr, "<=", 5)
        expr = LinearExpr()
        expr.add_term(x1, 2)
        expr.add_term(x2, 1)
        expr.add_term(x3, 2)
        model.add_constraint(expr, "<=", 8)
        expr = LinearExpr()
        expr.add_term(x1, 1)
        expr.add_term(x2, 3)
        expr.add_term(x3, 1)
        model.add_constraint(expr, "<=", 7)
        solver = SimplexSolver(model)
        obj, sol = solver.solve()
        self.assertAlmostEqual(obj, 12.6)
        self.assertAlmostEqual(sol["x2"], 1.2)
        self.assertAlmostEqual(sol["x3"], 0.0)
        self.assertAlmostEqual(sol["x1"], 3.4)

    def test_interior_point(self):
        model = Model("Interior Point Test")
        x = model.add_variable("x")
        y = model.add_variable("y")
        expr = LinearExpr()
        expr.add_term(x, 1)
        expr.add_term(y, 2)
        model.objective = Objective(expr, "max")
        expr = LinearExpr()
        expr.add_term(x, 1)
        expr.add_term(y, 1)
        model.add_constraint(expr, "<=", 10)
        expr = LinearExpr()
        expr.add_term(x, 1)
        expr.add_term(y, 4)
        model.add_constraint(expr, "<=", 20)
        expr = LinearExpr()
        expr.add_term(x, 3)
        expr.add_term(y, 2)
        model.add_constraint(expr, "<=", 30)
        solver = InteriorPointSolver(model)
        obj, sol = solver.solve()
        self.assertAlmostEqual(obj, 40/3)

if __name__ == "__main__":
    unittest.main()
